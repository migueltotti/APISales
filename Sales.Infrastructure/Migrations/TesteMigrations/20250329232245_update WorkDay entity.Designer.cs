// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sales.Infrastructure.Context;

#nullable disable

namespace Sales.Infrastructure.Migrations.TesteMigrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20250329232245_update WorkDay entity")]
    partial class updateWorkDayentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Sales.Domain.Models.Affiliate", b =>
                {
                    b.Property<int>("AffiliateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AffiliateId"));

                    b.Property<decimal>("Discount")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AffiliateId");

                    b.ToTable("Affiliate", (string)null);

                    b.HasData(
                        new
                        {
                            AffiliateId = 1,
                            Discount = 0.00m,
                            Name = "Nenhuma Afiliacao"
                        },
                        new
                        {
                            AffiliateId = 3,
                            Discount = 5.00m,
                            Name = "Duratex"
                        },
                        new
                        {
                            AffiliateId = 4,
                            Discount = 10.00m,
                            Name = "Teste"
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ImageUrl = "carnes-bovinas.jpg",
                            Name = "Carnes Bovinas"
                        },
                        new
                        {
                            CategoryId = 2,
                            ImageUrl = "produtos-diversos.jpg",
                            Name = "Produtos Diversos"
                        },
                        new
                        {
                            CategoryId = 3,
                            ImageUrl = "aves.jpg",
                            Name = "Aves"
                        },
                        new
                        {
                            CategoryId = 4,
                            ImageUrl = "carnes-suinas.jpg",
                            Name = "Carnes Suinas"
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.LineItem", b =>
                {
                    b.Property<int>("LineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LineItemId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("LineItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("LineItem", (string)null);

                    b.HasData(
                        new
                        {
                            LineItemId = 1,
                            Amount = 3m,
                            OrderId = 1,
                            Price = 3.5m,
                            ProductId = 1
                        },
                        new
                        {
                            LineItemId = 2,
                            Amount = 1m,
                            OrderId = 1,
                            Price = 9.9m,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Holder")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Holder = "",
                            Note = "",
                            OrderDate = new DateTime(2024, 9, 19, 15, 50, 45, 0, DateTimeKind.Unspecified),
                            OrderStatus = 3,
                            TotalValue = 10.00m,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            Holder = "",
                            Note = "Sem tomate",
                            OrderDate = new DateTime(2024, 9, 20, 15, 50, 45, 0, DateTimeKind.Unspecified),
                            OrderStatus = 2,
                            TotalValue = 20.00m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 3,
                            Holder = "",
                            Note = "",
                            OrderDate = new DateTime(2024, 9, 19, 15, 51, 39, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalValue = 30.00m,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 4,
                            Holder = "",
                            Note = "Cortado em tiras",
                            OrderDate = new DateTime(2024, 9, 19, 15, 53, 36, 0, DateTimeKind.Unspecified),
                            OrderStatus = 3,
                            TotalValue = 40.00m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 5,
                            Holder = "",
                            Note = "",
                            OrderDate = new DateTime(2024, 9, 20, 17, 47, 58, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            TotalValue = 0.00m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 6,
                            Holder = "",
                            Note = "Duplo",
                            OrderDate = new DateTime(2024, 9, 30, 8, 33, 16, 0, DateTimeKind.Unspecified),
                            OrderStatus = 3,
                            TotalValue = 83.49m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 7,
                            Holder = "Miguel Totti",
                            OrderDate = new DateTime(2024, 9, 30, 8, 33, 16, 0, DateTimeKind.Unspecified),
                            OrderStatus = 3,
                            TotalValue = 83.49m
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(175)
                        .HasColumnType("varchar(175)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(80)
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TypeValue")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            Description = "Coca Cola 250ml garrafinha",
                            ImageUrl = "coca-cola-250.jpg",
                            Name = "Coca-Cola 250",
                            StockQuantity = 10,
                            TypeValue = 2,
                            Value = 3.5m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "Pão Caseiro feito no dia",
                            ImageUrl = "pao-caseiro.jpg",
                            Name = "Pão Caseiro",
                            StockQuantity = 3,
                            TypeValue = 2,
                            Value = 9.9m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Picanha",
                            ImageUrl = "picanha.jpg",
                            Name = "Picanha",
                            StockQuantity = 5,
                            TypeValue = 1,
                            Value = 69.99m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "TesteProduto",
                            ImageUrl = "TesteProduto.jpg",
                            Name = "Teste Produto",
                            StockQuantity = 10,
                            TypeValue = 1,
                            Value = 10.00m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Description = "Teste2Produto",
                            ImageUrl = "Teste2.jpg",
                            Name = "Teste2",
                            StockQuantity = 10,
                            TypeValue = 2,
                            Value = 69.99m
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShoppingCartId"));

                    b.Property<int>("ProductsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("TotalValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCart", (string)null);
                });

            modelBuilder.Entity("Sales.Domain.Models.ShoppingCartProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("ProductId", "ShoppingCartId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartProducts");
                });

            modelBuilder.Entity("Sales.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal>("Points")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AffiliateId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AffiliateId = 1,
                            Cpf = "111.111.111-11",
                            DateBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "migueltotti2005@gmail.com",
                            Name = "Miguel Totti de Oliveira",
                            Password = "testemiguel",
                            Points = 0.00m,
                            Role = 2
                        },
                        new
                        {
                            UserId = 2,
                            AffiliateId = 1,
                            Cpf = "222.222.222-22",
                            DateBirth = new DateTime(2, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "isadorapaludeto15@gmail.com",
                            Name = "Isadora Leao Paludeto",
                            Password = "testeisadora",
                            Points = 0.00m,
                            Role = 2
                        },
                        new
                        {
                            UserId = 31,
                            AffiliateId = 1,
                            Cpf = "331.331.331-31",
                            DateBirth = new DateTime(3, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "testeadmin@gmail.com",
                            Name = "TesteAdmin",
                            Password = "testeadmin",
                            Points = 0.00m,
                            Role = 2
                        },
                        new
                        {
                            UserId = 32,
                            AffiliateId = 1,
                            Cpf = "332.332.332-32",
                            DateBirth = new DateTime(3, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "testeemployee@gmail.com",
                            Name = "TesteEmployee",
                            Password = "testeemployee",
                            Points = 0.00m,
                            Role = 1
                        },
                        new
                        {
                            UserId = 33,
                            AffiliateId = 1,
                            Cpf = "333.333.333-33",
                            DateBirth = new DateTime(3, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "testecustomer@gmail.com",
                            Name = "TesteCustomer",
                            Password = "testecustomer",
                            Points = 0.00m,
                            Role = 0
                        },
                        new
                        {
                            UserId = 35,
                            AffiliateId = 3,
                            Cpf = "444.444.444-44",
                            DateBirth = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TESTEAFILIACAO@gmail.com",
                            Name = "TESTEAFILIACAO",
                            Password = "TESTEAFaaaLIACAO213123@#@#",
                            Points = 0.00m,
                            Role = 0
                        },
                        new
                        {
                            UserId = 36,
                            AffiliateId = 1,
                            Cpf = "777.777.777-77",
                            DateBirth = new DateTime(2024, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TesteUsuarioToken@gmail.com",
                            Name = "TesteUsuarioToken",
                            Password = "TesteToken1234@",
                            Points = 0.00m,
                            Role = 0
                        },
                        new
                        {
                            UserId = 38,
                            AffiliateId = 1,
                            Cpf = "890.123.434-22",
                            DateBirth = new DateTime(2024, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "testedeusercomrole@gmail.com",
                            Name = "Teste de User com Role",
                            Password = "Testeusserrole1@",
                            Points = 0.00m,
                            Role = 1
                        });
                });

            modelBuilder.Entity("Sales.Domain.Models.WorkDay", b =>
                {
                    b.Property<int>("WorkDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WorkDayId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("FinishDayTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumberOfCanceledOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("NumberOfOrders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartDayTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("WorkDayId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkDay", (string)null);
                });

            modelBuilder.Entity("Sales.Domain.Models.LineItem", b =>
                {
                    b.HasOne("Sales.Domain.Models.Order", "Order")
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sales.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sales.Domain.Models.Order", b =>
                {
                    b.HasOne("Sales.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sales.Domain.Models.Product", b =>
                {
                    b.HasOne("Sales.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sales.Domain.Models.ShoppingCart", b =>
                {
                    b.HasOne("Sales.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sales.Domain.Models.ShoppingCartProduct", b =>
                {
                    b.HasOne("Sales.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sales.Domain.Models.ShoppingCart", null)
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sales.Domain.Models.User", b =>
                {
                    b.HasOne("Sales.Domain.Models.Affiliate", "Affiliate")
                        .WithMany("Users")
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");
                });

            modelBuilder.Entity("Sales.Domain.Models.WorkDay", b =>
                {
                    b.HasOne("Sales.Domain.Models.User", "Employee")
                        .WithMany("WorkDays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Sales.Domain.Models.Affiliate", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sales.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sales.Domain.Models.Order", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("Sales.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WorkDays");
                });
#pragma warning restore 612, 618
        }
    }
}
